<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{% block title %}Scan Carte SIM{% endblock %}</title>
    
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text><text y=%221.3em%22 x=%220.2em%22 font-size=%2276%22 fill=%22%23fff%22>sf</text></svg>">
    
    <!-- Bootstrap & Icons CSS -->
    <link rel="stylesheet" href="{{ asset('assets/css/bootstrap.css') }}">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css">
    
    <!-- DataTable CSS -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css">
    
    <!-- Custom Styles -->
    <style>
        .table {
            font-size: 12px;
        }
    </style>
    
    {% block javascripts %}
        <!-- jQuery, Axios, DataTables, Bootstrap JS, Custom JS, Chart.js -->
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
        <script src="{{ asset('assets/js/bootstrap.bundle.min.js') }}"></script>
        <script src="{{ asset('assets/js/custom.js') }}"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    {% endblock %}
</head>

<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg bg-light" data-bs-theme="light">
        <div class="container-fluid">
            <a class="navbar-brand" href="{{ path('app_syma_business') }}">
                <img src="{{ asset('assets/img/logo-syma@4x.jpg') }}" alt="Logo Syma" style="width:120px;" />
            </a>
            
               <button id="facturerCommandesBtn" class="btn btn-success">
                            Valider la livraison
                        </button>
            
            
    </nav>

    <!-- Contenu principal -->
    <div class="container-fluid my-1 rounded bg-white">

    <div class="alert alert-dismissible alert-light">
  <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  <h4 class="text-dark fw-bold text-uppercase mb-0">
                <i class="bi bi-upc-scan me-2"></i>
                <span class="text-primary">{{ client.nomSociete }}</span>
            </h4>
            Ventes en Tournée
</div>
        
       

<div class="alert alert-dismissible alert-warning">
  <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  <h4 class="alert-heading">Livraison : </h4>
  <p class="mb-0">Nombre de chapelets à livrer pour <strong>{{ client.nomSociete }}</strong> : <strong>{{ qteALivrer }}</strong> chapelets</p>
</div>
</h4>

                
        <!-- Formulaire pour saisir le code chapelet -->
        <form id="biperForm">
            <div class="form-floating mb-3 position-relative">
                <input 
                    class="form-control form-control-lg mt-2"
                    type="text"
                    id="chapeletCode"
                    name="chapeletCode"
                    required
                    maxlength="14"
                    inputmode="none"
                    placeholder="SBL00000000000"
                />
                <label for="chapeletCode">Code Chapelet</label>
            </div>
            <input type="hidden" readonly id="clientId" value="{{ clientId }}">
        </form>
        
        <!-- Message de réponse après le scan -->
        <p class="py-1 my-2" id="responseMessage" style="color: #333; font-size: 0.8rem;"></p>

        <!-- Affichage du total des commandes -->
        <div class="total-commandes my-3">
            <p>
                Total de toutes les commandes : 
                <span class="text-primary fw-bold" id="total-commandes-amount">0</span> €
            </p>
        </div>

        <!-- Liste des commandes (affichage dynamique via JS) -->
        <div id="commandes-list" class="row row-cols-1 row-cols-md-2 row-cols-lg-3"></div>
    </div> <!-- Fin du container-fluid -->

    <script>
        const chapeletInput = document.getElementById('chapeletCode');
        const clientId = document.getElementById('clientId').value; 
        const url = `/advinced/api/commandes/${clientId}`;

        // Focaliser le champ au chargement
        chapeletInput.focus();

        // Empêcher la perte du focus
        chapeletInput.addEventListener('blur', function() {
            setTimeout(() => {
                chapeletInput.focus();
            }, 100);
        });

        // Événement sur l'entrée du code chapelet
        chapeletInput.addEventListener('input', function() {
            const chapeletCode = this.value;

            if (chapeletCode.length === 14) {
                axios.post(`/advinced/api/comptoir/${clientId}`, { chapeletCode })
                    .then(response => {
                        document.getElementById('responseMessage').innerText = response.data.success || response.data.error;
                        // Réinitialisation du champ
                        chapeletInput.value = '';
                        chapeletInput.focus();
                    })
                    .catch(error => {
                        const errorMsg = error.response ? error.response.data.error : 'Une erreur est survenue.';
                        document.getElementById('responseMessage').innerText = errorMsg;
                        // Vider le champ même en cas d'erreur
                        chapeletInput.value = '';
                        chapeletInput.focus();
                    });
            }
        });

        // Fonction pour récupérer et afficher les commandes
        function fetchAndRenderCommandes() {
            axios.get(url)
                .then(response => {
                    const commandes = response.data;
                    renderCommandes(commandes);
                })
                .catch(error => {
                    console.error('Erreur lors de la récupération des commandes:', error);
                });
        }

        // Affichage des commandes sous forme de cartes
        function renderCommandes(commandes) {
            const commandesList = document.getElementById('commandes-list');
            commandesList.innerHTML = ''; // Réinitialiser l'affichage

            let totalAllCommandes = 0;

            if (commandes.length === 0) {
                commandesList.innerHTML = '<div class="container-fluid col-12 text-center"></div>';
                document.getElementById('total-commandes-amount').innerText = '0';
            } else {
                commandes.forEach(commande => {
                    const commandeTotal = parseFloat(commande.total) || 0;
                    totalAllCommandes += commandeTotal;

                    // URL des détails de la commande
                    const detailsUrl = `/commandes/${encodeURIComponent(commande.numero)}/lignes`;

                    // Création de la carte
                    const card = document.createElement('div');
                    card.classList.add('col', 'mb-3');

                    card.innerHTML = `
                        <div class="card">
                            <div class="card-body">
                                <p class="card-text">
                                    <strong>Date de la vente : </strong> ${commande.date}<br>
                                    <strong>Type de cartes :</strong> ${commande.typeCarte}<br>
                                    <strong>Nombre de cartes :</strong> ${commande.qte}<br>
                                    <strong>Total :</strong> ${commande.total} €
                                </p>
                                <a class="btn btn-secondary btn-sm" href="${detailsUrl}">Détails de la vente</a>
                            </div>
                        </div>
                    `;

                    commandesList.appendChild(card);
                });

                // Mise à jour du total
                document.getElementById('total-commandes-amount').innerText = totalAllCommandes.toFixed(2);
            }
        }

        // Chargement initial des commandes
        fetchAndRenderCommandes();

        // Mise à jour des commandes toutes les secondes
        setInterval(fetchAndRenderCommandes, 1000);

        // Fonction pour facturer toutes les commandes
        function facturerToutesCommandes() {
            const urlFacturer = `/advinced/api/commandes/${clientId}/facturer`;

            axios.post(urlFacturer)
                .then(response => {
                    alert('Toutes les commandes ont été facturées avec succès.');
                    // Rafraîchir la liste des commandes après facturation
                    fetchAndRenderCommandes();
                })
                .catch(error => {
                    alert('Une erreur est survenue lors de la facturation des commandes.');
                    console.error('Erreur lors de la facturation des commandes:', error);
                });
        }

        // Écouteur sur le bouton de facturation
        document.getElementById('facturerCommandesBtn').addEventListener('click', function(e) {
            e.preventDefault();
            facturerToutesCommandes();
        });
    </script>
</body>
</html>
