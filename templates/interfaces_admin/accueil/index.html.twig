<div class="container-fluid">

    {% include 'partials/header_card.html.twig' with {
        icon_class: 'bi bi-shield-lock',
        page_title: 'Bien venue sur votre espace',
        section_icon_class: '',
        section_title: 'Bienvenue sur votre espace',
        button_text: 'Déconnexion',
        button_link: path('app_logout'),
        button_style :'danger'
    } %}
</div>



    <div class="d-flex justify-content-center">
        <div class="row my-4 w-100">
            <!-- Colonne 1 -->
            <div class="col-md-2 my-2">
                <a href="{{ path('app_commande_index') }}" class="shadow-sm btn btn-secondary position-relative d-flex flex-column align-items-center w-100">
                    <i class="bi bi-cart fs-4 text-danger"></i>
                    <span class="mt-2">Commandes<br>clients</span>
                    <span id="totalEnAttente" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-primary">
                        00+
                    </span>
                </a>
            </div>

            <div class="col-md-2 my-2">
                <a href="{{ path('users_with_orders') }}" class="shadow-sm btn btn-secondary position-relative d-flex flex-column align-items-center w-100">
                    <i class="bi bi-upc-scan fs-4 text-danger"></i>
                    <span class="mt-2">Valider une<br>commandes</span>
                </a>
            </div>

           


         

           

             <div class="col-md-2 my-2">
                <a href="{{path('select_advinced_client')}}" class="shadow-sm btn btn-secondary position-relative d-flex flex-column align-items-center w-100">
                    <i class="bi bi-bag-check fs-4 text-danger"></i>
                    <span class="mt-2">Vente<br>directe (Terrain)</span>
                   
                </a>
            </div>
            


            <div class="col-md-2 my-2">
                <a  href="{{path('management_import_carte_sim')}}" class="shadow-sm btn btn-secondary position-relative d-flex flex-column align-items-center w-100">
                                     <i class="bi bi-cloud-upload fs-4 text-danger"></i>

                    <span class="mt-2">Importation<br>des stocks</span>
                   
                </a>
            </div>
            <div class="col-md-2 my-2">
                <a  href="{{path('app_pending_sim_cards_index')}}" class="shadow-sm btn btn-secondary position-relative d-flex flex-column align-items-center w-100">
                                     <i class="bi bi-sim fs-4 text-danger"></i>

                    <span class="mt-2">Base<br>Préproduction</span>
                   
                </a>
            </div>
 <!-- Colonne 5 -->
            <div class="col-md-2 my-2">
                <a href="{{ path('app_carte_sim_types_block_index') }}" type="button" class="shadow-sm btn btn-success position-relative d-flex flex-column align-items-center w-100">
                    <i class="bi bi-sim fs-4 text-white"></i>
                    <span class="mt-2">Base<br>de production</span>
                </a>
            </div>

            
        </div>
    </div>

    <div class="d-flex justify-content-center">
        <div class="row my-4 w-100">
            <div class="col-md-4 my-2">
{{ include('_sidebars/right/admin/stat_commande_by_status.html.twig') }}
</div>
            <div class="col-md-4 my-2">

{{ include('_sidebars/right/admin/stat_quotas_by_client.html.twig') }}
</div>
            <div class="col-md-4 my-2">
{{ include('_sidebars/right/admin/stat_ventes_cartes_sim_by_type.html.twig') }}
</div>
            <div class="col-md-4 my-2">
</div>
</div>
</div>


<script>
  const updateCommandesData = async () => {
    try {
      const response = await axios.get("/api/commande");
      localStorage.setItem('commandesData', JSON.stringify(response.data)); // Stocker les données sous forme de chaîne JSON
    } catch (error) {
      console.error("Erreur lors de la récupération des commandes:", error);
    }
  };

  // Fonction pour récupérer les données de localStorage
  const getCommandesFromLocalStorage = () => {
    const commandesJson = localStorage.getItem('commandesData'); // Remplacez 'commandesData' par la clé que vous utilisez
    return commandesJson ? JSON.parse(commandesJson) : []; // Convertir en objet JavaScript
  };

  // Fonction pour mettre à jour le nombre total de commandes en attente
  const updateTotalEnAttente = (commandes) => {
    const totalEnAttente = commandes.filter(commande => commande.status === 'en_attente').length;

    // Mettre à jour le DOM avec le nombre total des commandes en attente
    document.getElementById('totalEnAttente').textContent = totalEnAttente;
  };

  // Fonction pour mettre à jour les commandes à intervalle régulier
  const updateCommandesInterval = async () => {
    await updateCommandesData(); // Mettre à jour les données depuis l'API
    const commandesData = getCommandesFromLocalStorage(); // Récupérer les données mises à jour
    // console.log("Données de commandes :", commandesData); // Affichez les données
    updateTotalEnAttente(commandesData); // Mettre à jour le total en attente
  };

  // Mettre à jour les commandes toutes les 3 secondes (3000 ms)
  setInterval(updateCommandesInterval, 3000); 

  // Appel initial pour mettre à jour le total en attente immédiatement
  updateCommandesInterval();
</script>

	

