<html>
    <head>
        <meta charset="UTF-8">
        <title>{% block title %}Welcome!{% endblock %}</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <script src='https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js'></script>
        <style>
            .card {
                margin-bottom: 1rem;
            }
            .badge {
                font-size: 1rem;
            }
        </style>
        <!-- Icône de la page -->
        <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text><text y=%221.3em%22 x=%220.2em%22 font-size=%2276%22 fill=%22%23fff%22>sf</text></svg>">
        
        <!-- Lien vers la bibliothèque Bootstrap Icons -->
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css">

        {% block stylesheets %}
        <!-- Lien vers la feuille de style Bootstrap -->
        <link rel="stylesheet" href="{{ asset('assets/css/bootstrap.min.css') }}">
        <!-- Table jQuery -->
        <link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css">
        {% endblock %}
        
        {% block javascripts %}
        <!-- Scripts nécessaires pour le fonctionnement de Bootstrap -->
        <script src="{{ asset('assets/js/bootstrap.bundle.min.js') }}" data-manual=""></script>
        <!-- Script personnalisé -->
        <script src="{{ asset('assets/js/custom.js') }}" data-manual=""></script>
        <!-- Prism.js (peut-être pour la coloration syntaxique) -->
        <script src="{{ asset('assets/js/prism.js') }}" data-manual=""></script>
        <!-- API User information pour le left widget -->
        <script type="module" src="{{ asset('assets/js/api/commandeInformations.js') }}"></script>
        <!-- Initialisation de dataTable -->
        <script type="module" src="{{ asset('assets/js/dataTableInit.js') }}" defer></script>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
        {% endblock %}
    </head>
    
    <body>
        <div class="container-fluid my-3 rounded bg-white">
            <div class="container-fluid">
                <!-- Titre principal avec icône -->
                <div class="d-flex align-items-center justify-content-between bg-light py-3 mb-4 border-bottom">
                    <h3 class="text-dark fw-bold text-uppercase mb-0">
                        <i class="bi bi-upc-scan me-2"></i> Scannez un chapelet !
                    </h3>
                </div>
		<!-- Section des boutons -->
<div class="d-flex  align-items-center action-buttons mb-3 p-2 bg-light rounded border">
 <a href="{{ path('users_with_orders') }}" class="btn btn-secondary me-2">
       <i class="bi bi-arrow-left-short"></i> Retour à la liste des commandes
    </a>
</div>
<p class="py-3 fw-bold rounded shadow-lg px-4" id="responseMessage" style="background-color: #f8f9fa; color: #333; font-size: 1rem; border-left: 5px solid #d9230f;">
    <!-- Message contenu ici -->
</p>
                <form id="biperForm">
                    <div class="form-floating mb-3 position-relative">
                        <input 
                            class="form-control" 
                            type="text" 
                            id="chapeletCode" 
                            name="chapeletCode" 
                            required 
                            maxlength="14" 
                            placeholder="SBL00000000000"
                            ">
                        <label for="chapeletCode">Code Chapelet</label>
                    </div>
                    <input type="hidden" readonly id="clientId" value="{{ clientId }}">
                </form>

               
                <span class="fw-bold">Client : </span><span class="badge bg-primary" id="clientEnCours">Client non défini</span>

                <h6 class="my-3 border-bottom border-secondary fw-bold text-uppercase">Liste des Commandes</h6>
                
                <!-- Section pour afficher les commandes sous forme de cartes -->
                <div id="commandes-list" class="row row-cols-1 row-cols-md-2 row-cols-lg-3">
                    <!-- Les cartes des commandes seront ajoutées ici dynamiquement -->
                </div>

                

                <script>
                    document.getElementById('chapeletCode').focus(); // Met le focus sur le champ chapeletCode
                    document.getElementById('chapeletCode').addEventListener('input', function() {
                        const chapeletCode = this.value;
                        const clientId = document.getElementById('clientId').value;

                        // Loggez le numéro de série et le client ID
                        console.log("Numéro de série:", chapeletCode);
                        console.log("Client ID:", clientId);

                        // Vérifiez si le nombre de caractères est 14
                        if (chapeletCode.length === 14) {
                            // Envoyer la requête dès que le nombre de caractères atteint 14
                            axios.post(`/api/biper/${clientId}`, { chapeletCode })
                                .then(response => {
                                    document.getElementById('responseMessage').innerText = response.data.success || response.data.error;
                                })
                                .catch(error => {
                                    console.error("Erreur lors de l'envoi:", error.response.data); // Loggez l'erreur pour obtenir plus de détails
                                    const errorMsg = error.response ? error.response.data.error : 'Une erreur est survenue.';
                                    document.getElementById('responseMessage').innerText = errorMsg;
                                });
                        }
                    });

                    const clientId = document.getElementById('clientId').value; // Récupération de l'ID du client
                    const url = `/api/commandes/${clientId}`;

                    // Fonction pour récupérer et afficher les commandes
                    function fetchAndRenderCommandes() {
                        axios.get(url)
                            .then(response => {
                                const commandes = response.data;
                                renderCommandes(commandes);
                            })
                            .catch(error => {
                                console.error('Erreur lors de la récupération des commandes:', error);
                            });
                    }

                    // Fonction pour afficher les commandes sous forme de cartes
                    function renderCommandes(commandes) {
                        const commandesList = document.getElementById('commandes-list');
                        commandesList.innerHTML = ''; // Efface le contenu précédent

                        if (commandes.length === 0) {
                            commandesList.innerHTML = '<div class=" container-fluid col-12 text-center">Aucune commande trouvée pour ce client.</div>';
                        } else {
                            commandes.forEach(commande => {
                                // Affiche le client en cours
                                document.getElementById('clientEnCours').innerHTML = `${commande.user}`;

                                // Créer une carte pour chaque commande
                                const card = document.createElement('div');
                                card.classList.add('col', 'mb-3');

                                const statusClass = commande.status === 'en_cours' ? 'bg-warning text-dark' : 'bg-success';
                                const statusText = commande.status === 'en_cours' ? 'En Cours' : 'En Attente';

                                card.innerHTML = `
                                    <div class="card">
                                        <div class="card-body">
                                            <h6 class="card-title mb-2">
                                                <span class="badge ${statusClass}">
                                                    ${statusText}
                                                </span>
                                            </h6>
                                            <p class="card-text">
                                                <strong>Commande ID:</strong> ${commande.numero} <br>
                                                <strong>Type:</strong> ${commande.typeCarte} <br>
                                                <strong>Qtée:</strong> ${commande.qte - commande.qtevalidee}
                                            </p>
                                        </div>
                                    </div>
                                `;

                                commandesList.appendChild(card);
                            });
                        }
                    }

                    // Appel initial pour charger les commandes
                    fetchAndRenderCommandes();

                    // Mettre à jour les commandes toutes les secondes
                    setInterval(fetchAndRenderCommandes, 1000);
                </script>
            </div>
        </div>
    </body>
</html>
