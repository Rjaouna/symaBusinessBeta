<!-- Container for SIM Quota Evaluation -->
<div class="mt-4 mb-2 px-1 py-3 rounded shadow-sm bg-white">
    <h6 class="fw-bold mb-2 ml-2">Évaluation des Quotas SIM :</h6>

    <!-- Progress bars for each SIM quota -->
    <div id="sim-quota-progress">
        <!-- Progress bars will be injected here by JavaScript -->
    </div>
</div>

<script>
// Function to render progress bars for each SIM quota
function renderQuotaProgress(userData) {
    if (!userData) {
        console.error('Aucune donnée utilisateur trouvée pour le graphique');
        return;
    }

    const quotaData = [
        { name: 'Carte Sim 05', quota: userData.quotas.sim5Quota, usage: userData.sim5Usage },
        { name: 'Carte Sim 10', quota: userData.quotas.sim10Quota, usage: userData.sim10Usage },
        { name: 'Carte Sim 15', quota: userData.quotas.sim15Quota, usage: userData.sim15Usage },
        { name: 'Carte Sim 20', quota: userData.quotas.sim20Quota, usage: userData.sim20Usage }
    ];

    const container = document.querySelector('#sim-quota-progress');
    container.innerHTML = ''; // Clear existing content

    quotaData.forEach(item => {
        // Calculate usage percentage without decimals
        const usagePercentage = item.quota > 0 ? Math.floor((item.usage / item.quota) * 100) : 0;

        // Create the progress bar HTML
        const progressBarHTML = `
            <div class="mb-3">
                <div class="d-flex justify-content-between">
                    <span>${item.name}</span>
                    <span>${usagePercentage}% utilisé</span>
                </div>
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: ${usagePercentage}%" aria-valuenow="${usagePercentage}" aria-valuemin="0" aria-valuemax="100">
                        ${usagePercentage}%
                    </div>
                </div>
            </div>
        `;

        // Append the progress bar to the container
        container.insertAdjacentHTML('beforeend', progressBarHTML);
    });
}

// Function to fetch updated user data and render progress bars every second
function updateProgressBars() {
    const userData = JSON.parse(localStorage.getItem('userData')); // Retrieve user data from localStorage
    renderQuotaProgress(userData);
}

// Set an interval to update the progress bars every 1 second
setInterval(updateProgressBars, 1000);

// Initial call to render the progress bars when the page loads
document.addEventListener('DOMContentLoaded', updateProgressBars);
</script>
