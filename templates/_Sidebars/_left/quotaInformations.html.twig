<div class="mt-4 mb-2 px-2 py-3 rounded-lg shadow-sm  border border-light rounded">
    <div class="d-flex align-items-center mb-3">
        <i class="bi bi-speedometer fs-4 text-primary rounded shadow-sm px-1 me-1 bg-white"></i>
        <h4 class="mb-0 text-secondary" style=" font-weight: 100;letter-spacing: -0.5px;">Statut Quotas </h4>
       
    </div>
    <div class="d-flex align-items-center mb-3">
   <p class="quota-info" style="text-align: justify;">
    Suivez l'état de vos <strong>quotas de cartes SIM en temps réel</strong> avec ce tableau de bord. 
    Les commandes sont effectuées par <span class="text-primary"><strong>chapelets de 5 cartes SIM</strong></span>.</p>
</div>
    <!-- Progress bars for each SIM quota -->
    <div id="sim-quota-progress">
        <!-- Progress bars will be injected here by JavaScript -->
    </div>
</div>

<!-- Style customisé -->
<style>
    .progress-bar {
        transition: width 0.5s ease-in-out;
    }

    .progress {
        height: 1.25rem;
        border-radius: 0.75rem;
        background-color: #e9ecef;
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .progress-bar {
        border-radius: 0.75rem;
    }

    .progress-container {
        margin-bottom: 1rem;
        border-radius: 0.75rem;
        background-color: #fff;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .progress-bar-text {
        font-weight: 600;
        font-size: 0.875rem;
    }

    .quota-title {
        font-size: 0.8rem;
        font-weight: 900;
        color: #6c757d;

    }

    .quota-info {
        color: #6c757d;
    }
</style>

<script>
// Function to render progress bars for each SIM quota
function renderQuotaProgress(userData) {
    if (!userData) {
        console.error('Aucune donnée utilisateur trouvée pour le tableau de quota');
        return;
    }

    const quotaData = [
        { name: 'Carte Sim 05', quota: userData.quotas.sim5Quota, usage: userData.sim5Usage },
        { name: 'Carte Sim 10', quota: userData.quotas.sim10Quota, usage: userData.sim10Usage },
        { name: 'Carte Sim 15', quota: userData.quotas.sim15Quota, usage: userData.sim15Usage },
        { name: 'Carte Sim 20', quota: userData.quotas.sim20Quota, usage: userData.sim20Usage }
    ];

    const container = document.querySelector('#sim-quota-progress');
    container.innerHTML = ''; // Clear existing content

    quotaData.forEach(item => {
        // Calculate usage percentage
        const usagePercentage = item.quota > 0 ? Math.floor((item.usage / item.quota) * 100) : 0;

        // Create the progress bar HTML
        const progressBarHTML = `
            <div class="progress-container p-3">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <span class="quota-title">${item.name}</span>
                    <span class="quota-info">
                        ${item.usage < 0 ? `${item.quota} restant + ${Math.abs(item.usage)} <i class="bi bi-gift text-danger"></i> bonus` : `${item.quota - item.usage} restant`}
                    </span>
                </div>
                <div class="progress">
                    <div class="progress-bar" role="progressbar" 
                        style="width: ${item.usage < 0 ? 0 : usagePercentage}%" 
                        aria-valuenow="${item.usage}" 
                        aria-valuemin="0" 
                        aria-valuemax="100">
                        <span class="progress-bar-text">${usagePercentage}%</span>
                    </div>
                </div>
            </div>
        `;

        // Append the progress bar to the container
        container.insertAdjacentHTML('beforeend', progressBarHTML);
    });
}

// Function to fetch updated user data and render progress bars every second
function updateProgressBars() {
    const userData = JSON.parse(localStorage.getItem('userData')); // Retrieve user data from localStorage
    renderQuotaProgress(userData);
}

// Set an interval to update the progress bars every 1 second
setInterval(updateProgressBars, 1000);

// Initial call to render the progress bars when the page loads
document.addEventListener('DOMContentLoaded', updateProgressBars);
</script>
